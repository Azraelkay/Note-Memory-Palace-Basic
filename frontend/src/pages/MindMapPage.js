import React from 'react';
import VipUpgradePrompt from '../components/VipUpgradePrompt';

const MindMapPage = () => {
  return (
    <VipUpgradePrompt
      featureName="ÊÄùÁª¥ÂØºÂõæ"
      featureIcon="üß†"
      description="ÂàõÂª∫ÂíåÁºñËæëÊÄùÁª¥ÂØºÂõæÔºåÂèØËßÜÂåñÊÇ®ÁöÑÊÉ≥Ê≥ïÂíåÁü•ËØÜÁªìÊûÑ"
      features={[
        'ËäÇÁÇπÊãñÊãΩÁºñËæë',
        'Â§öÊ†∑ÂºèËá™ÂÆö‰πâ',
        'ÂõæÁâáÂØºÂá∫ÂäüËÉΩ',
        'Âçè‰ΩúÁºñËæë',
        'Ê®°ÊùøÂ∫ìÊîØÊåÅ',
        'Êô∫ËÉΩÂ∏ÉÂ±ÄÁÆóÊ≥ï'
      ]}
    />
  );
};

export default MindMapPage;

/* ÂéüÂßã‰ª£Á†Å‰øùÁïô‰Ωú‰∏∫Ê≥®ÈáäÔºå‰ª•‰æøÂ∞ÜÊù•VIPÁâàÊú¨‰ΩøÁî®
import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import MindMap from '../components/MindMap';
import api from '../services/api';

const MindMapPage = () => {
  const { isAuthenticated } = useAuth();
  const [mindMaps, setMindMaps] = useState([]);
  const [currentMindMap, setCurrentMindMap] = useState(null);
  const [isCreating, setIsCreating] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Ëé∑ÂèñÊÄùÁª¥ÂØºÂõæÂàóË°®
  const fetchMindMaps = async () => {
    try {
      setLoading(true);
      setError('');
      
      // ËøôÈáåÊàë‰ª¨‰ΩøÁî®Á¨îËÆ∞APIÊù•Â≠òÂÇ®ÊÄùÁª¥ÂØºÂõæÊï∞ÊçÆ
      // ÈÄöËøáÁâπÊÆäÁöÑÊ†áÁ≠æÊù•Ê†áËØÜÊÄùÁª¥ÂØºÂõæ
      const response = await api.get('/notes?tags=mindmap');
      const mindMapNotes = response.data.notes || [];
      
      setMindMaps(mindMapNotes.map(note => ({
        id: note.id,
        title: note.title,
        data: note.content ? JSON.parse(note.content) : null,
        created_at: note.created_at,
        updated_at: note.updated_at
      })));
    } catch (err) {
      setError('Ëé∑ÂèñÊÄùÁª¥ÂØºÂõæÂàóË°®Â§±Ë¥•');
      console.error('Ëé∑ÂèñÊÄùÁª¥ÂØºÂõæÂ§±Ë¥•:', err);
    } finally {
      setLoading(false);
    }
  };

  // ÂàùÂßãÂä†ËΩΩ
  useEffect(() => {
    if (isAuthenticated) {
      fetchMindMaps();
    }
  }, [isAuthenticated]);

  // ÂàõÂª∫Êñ∞ÊÄùÁª¥ÂØºÂõæ
  const createMindMap = () => {
    setCurrentMindMap({
      id: null,
      title: 'Êñ∞ÊÄùÁª¥ÂØºÂõæ',
      data: {
        nodes: [
          { id: 1, x: 400, y: 300, text: '‰∏≠ÂøÉ‰∏ªÈ¢ò', level: 0, parent: null, color: '#667eea' }
        ],
        connections: []
      }
    });
    setIsCreating(true);
  };

  // ÊâìÂºÄÊÄùÁª¥ÂØºÂõæ
  const openMindMap = (mindMap) => {
    setCurrentMindMap(mindMap);
    setIsCreating(true);
  };

  // ‰øùÂ≠òÊÄùÁª¥ÂØºÂõæ
  const saveMindMap = async (data) => {
    try {
      setError('');
      
      const noteData = {
        title: data.title || 'ÊÄùÁª¥ÂØºÂõæ',
        content: JSON.stringify({
          nodes: data.nodes,
          connections: data.connections
        }),
        tags: ['mindmap'],
        categories: ['ÊÄùÁª¥ÂØºÂõæ']
      };

      let savedNote;
      if (currentMindMap?.id) {
        // Êõ¥Êñ∞Áé∞ÊúâÊÄùÁª¥ÂØºÂõæ
        savedNote = await api.put(`/notes/${currentMindMap.id}`, noteData);
      } else {
        // ÂàõÂª∫Êñ∞ÊÄùÁª¥ÂØºÂõæ
        savedNote = await api.post('/notes', noteData);
      }

      // Êõ¥Êñ∞ÂΩìÂâçÊÄùÁª¥ÂØºÂõæ
      setCurrentMindMap({
        id: savedNote.data.id,
        title: savedNote.data.title,
        data: {
          nodes: data.nodes,
          connections: data.connections
        }
      });

      // Âà∑Êñ∞ÂàóË°®
      await fetchMindMaps();
      
      alert('ÊÄùÁª¥ÂØºÂõæ‰øùÂ≠òÊàêÂäüÔºÅ');
    } catch (err) {
      setError('‰øùÂ≠òÊÄùÁª¥ÂØºÂõæÂ§±Ë¥•');
      console.error('‰øùÂ≠òÂ§±Ë¥•:', err);
      alert('‰øùÂ≠òÂ§±Ë¥•: ' + (err.response?.data?.error || err.message));
    }
  };

  // Âà†Èô§ÊÄùÁª¥ÂØºÂõæ
  const deleteMindMap = async (mindMapId) => {
    if (!window.confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÊÄùÁª¥ÂØºÂõæÂêóÔºü')) return;

    try {
      await api.delete(`/notes/${mindMapId}`);
      await fetchMindMaps();
      
      if (currentMindMap?.id === mindMapId) {
        setCurrentMindMap(null);
        setIsCreating(false);
      }
      
      alert('ÊÄùÁª¥ÂØºÂõæÂà†Èô§ÊàêÂäüÔºÅ');
    } catch (err) {
      setError('Âà†Èô§ÊÄùÁª¥ÂØºÂõæÂ§±Ë¥•');
      console.error('Âà†Èô§Â§±Ë¥•:', err);
      alert('Âà†Èô§Â§±Ë¥•: ' + (err.response?.data?.error || err.message));
    }
  };

  // ÂÖ≥Èó≠ÁºñËæëÂô®
  const closeEditor = () => {
    setCurrentMindMap(null);
    setIsCreating(false);
  };

  if (!isAuthenticated) {
    return (
      <div className="mindmap-page">
        <div className="auth-required">
          <h2>ËØ∑ÂÖàÁôªÂΩï</h2>
          <p>ÊÇ®ÈúÄË¶ÅÁôªÂΩïÂêéÊâçËÉΩ‰ΩøÁî®ÊÄùÁª¥ÂØºÂõæÂäüËÉΩ</p>
        </div>
      </div>
    );
  }

  return (
    <div className="mindmap-page">
      <style jsx>{`
        .mindmap-page {
          min-height: 100vh;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          padding: 2rem 0;
        }

        .mindmap-container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 0 1rem;
        }

        .mindmap-header {
          text-align: center;
          margin-bottom: 2rem;
          color: white;
        }

        .mindmap-title {
          font-size: 2.5rem;
          font-weight: 700;
          margin-bottom: 1rem;
          background: linear-gradient(45deg, #fff, #e0e7ff);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .mindmap-subtitle {
          font-size: 1.1rem;
          opacity: 0.9;
        }

        .mindmap-actions {
          display: flex;
          justify-content: center;
          gap: 1rem;
          margin-bottom: 2rem;
        }

        .action-btn {
          padding: 0.75rem 1.5rem;
          border: none;
          border-radius: 10px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .create-btn {
          background: linear-gradient(135deg, #10b981, #059669);
          color: white;
        }

        .create-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
        }

        .back-btn {
          background: rgba(255, 255, 255, 0.2);
          color: white;
          border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .back-btn:hover {
          background: rgba(255, 255, 255, 0.3);
        }

        .mindmap-list {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
          gap: 1.5rem;
          margin-bottom: 2rem;
        }

        .mindmap-card {
          background: rgba(255, 255, 255, 0.95);
          border-radius: 15px;
          padding: 1.5rem;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
        }

        .mindmap-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .card-header {
          display: flex;
          justify-content: between;
          align-items: center;
          margin-bottom: 1rem;
        }

        .card-title {
          font-size: 1.2rem;
          font-weight: 600;
          color: #333;
          margin: 0;
        }

        .card-date {
          font-size: 0.9rem;
          color: #666;
          margin-bottom: 1rem;
        }

        .card-actions {
          display: flex;
          gap: 0.5rem;
        }

        .card-btn {
          padding: 0.5rem 1rem;
          border: none;
          border-radius: 8px;
          font-size: 0.9rem;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .open-btn {
          background: #667eea;
          color: white;
          flex: 1;
        }

        .open-btn:hover {
          background: #5a67d8;
        }

        .delete-btn {
          background: #ef4444;
          color: white;
        }

        .delete-btn:hover {
          background: #dc2626;
        }

        .mindmap-editor {
          background: rgba(255, 255, 255, 0.95);
          border-radius: 20px;
          padding: 1rem;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
          height: 600px;
        }

        .editor-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1rem;
          padding: 0 1rem;
        }

        .editor-title {
          font-size: 1.3rem;
          font-weight: 600;
          color: #333;
        }

        .close-btn {
          background: #ef4444;
          color: white;
          border: none;
          border-radius: 8px;
          padding: 0.5rem 1rem;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .close-btn:hover {
          background: #dc2626;
        }

        .loading {
          text-align: center;
          color: white;
          padding: 3rem;
        }

        .error {
          background: rgba(239, 68, 68, 0.1);
          color: #ef4444;
          padding: 1rem;
          border-radius: 10px;
          margin-bottom: 1rem;
          text-align: center;
        }

        .auth-required {
          text-align: center;
          color: white;
          padding: 4rem 2rem;
        }

        .empty-state {
          text-align: center;
          color: white;
          padding: 3rem;
        }

        .empty-state h3 {
          margin-bottom: 1rem;
        }

        @media (max-width: 768px) {
          .mindmap-title {
            font-size: 2rem;
          }

          .mindmap-list {
            grid-template-columns: 1fr;
          }

          .mindmap-actions {
            flex-direction: column;
            align-items: center;
          }
        }
      `}</style>

      <div className="mindmap-container">
        {!isCreating ? (
          <>
            <div className="mindmap-header">
              <h1 className="mindmap-title">üß† ÊÄùÁª¥ÂØºÂõæ</h1>
              <p className="mindmap-subtitle">
                ÂèØËßÜÂåñÊÇ®ÁöÑÊÉ≥Ê≥ïÂíåÁü•ËØÜÁªìÊûÑ
              </p>
            </div>

            <div className="mindmap-actions">
              <button className="action-btn create-btn" onClick={createMindMap}>
                ‚ûï ÂàõÂª∫ÊÄùÁª¥ÂØºÂõæ
              </button>
            </div>

            {error && (
              <div className="error">
                {error}
              </div>
            )}

            {loading ? (
              <div className="loading">
                <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>‚è≥</div>
                <h3>Âä†ËΩΩ‰∏≠...</h3>
              </div>
            ) : (
              <>
                {mindMaps.length > 0 ? (
                  <div className="mindmap-list">
                    {mindMaps.map(mindMap => (
                      <div key={mindMap.id} className="mindmap-card">
                        <div className="card-header">
                          <h3 className="card-title">{mindMap.title}</h3>
                        </div>
                        <div className="card-date">
                          ÂàõÂª∫Êó∂Èó¥: {new Date(mindMap.created_at).toLocaleDateString()}
                        </div>
                        <div className="card-actions">
                          <button 
                            className="card-btn open-btn"
                            onClick={() => openMindMap(mindMap)}
                          >
                            ÊâìÂºÄ
                          </button>
                          <button 
                            className="card-btn delete-btn"
                            onClick={() => deleteMindMap(mindMap.id)}
                          >
                            Âà†Èô§
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="empty-state">
                    <h3>ËøòÊ≤°ÊúâÊÄùÁª¥ÂØºÂõæ</h3>
                    <p>ÁÇπÂáª"ÂàõÂª∫ÊÄùÁª¥ÂØºÂõæ"ÂºÄÂßãÊÇ®ÁöÑÁ¨¨‰∏Ä‰∏™ÊÄùÁª¥ÂØºÂõæ</p>
                  </div>
                )}
              </>
            )}
          </>
        ) : (
          <div className="mindmap-editor">
            <div className="editor-header">
              <h2 className="editor-title">
                {currentMindMap?.title || 'Êñ∞ÊÄùÁª¥ÂØºÂõæ'}
              </h2>
              <button className="close-btn" onClick={closeEditor}>
                ÂÖ≥Èó≠
              </button>
            </div>
            <MindMap
              initialData={currentMindMap?.data}
              onSave={saveMindMap}
              onDataChange={(data) => {
                if (currentMindMap) {
                  setCurrentMindMap({
                    ...currentMindMap,
                    data
                  });
                }
              }}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default MindMapPage;
